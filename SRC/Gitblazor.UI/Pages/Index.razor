@page "/"
@page "/home"
@inject NavigationManager Navigation;
@inject State state;
@inject ISnackbar Snackbar;
@using Blazor3D.Cameras;
@using Blazor3D.Controls;
@using Blazor3D.Events;
@using Blazor3D.Geometires;
@using Blazor3D.Lights;
@using Blazor3D.Materials;
@using Blazor3D.Maths;
@using Blazor3D.Objects;
@using Blazor3D.Scenes;
@using Blazor3D.Settings;
@using Gitblazor.UI.Styles;
@using GraphQL.Client.Http;
@using GraphQL.Client.Serializer.Newtonsoft;
@using GraphQL;

<div class="flex flex-col gap-2">
    <div class="flex flex-col md:flex-row text-black gap-2">
        <DashboardCard Title="Profile" WidthClass="basis-1/4" HeightClass="h-64" >
            <div class="flex flex-col h-full p-2 w-full">
                <div class="flex justify-center m-5">
                    <img src=@state.user.avatar_url class="w-36 h-36 rounded-full" alt="My Happy SVG" />
                </div>
                <div class="bg-gradient-to-b from-violet-700 to-violet-800 p-2 h-full ">
                    <h3 class="font-bold text-gray-100">@state.user.name</h3>
                    <h3 class="font-regular text-gray-100 opacity-70">@state.user.login</h3>

                </div>
            </div>
        </DashboardCard>
        <DashboardCard Title="Repositories" WidthClass="basis-3/4" HeightClass="h-64">
            @foreach (var model in repositories)
            {
                <div class="basis-1/2 p-1 text-gray-100">
                    <div class="bg-gradient-to-b from-violet-700 to-violet-800 p-4">
                        @model.name
                    </div>
                </div>
            }
        </DashboardCard>
    </div>
    <DashboardCard Title="Activity" WidthClass="basis-full" HeightClass="h-max">
        <div class="flex flex-row">
            <div class="w-3/5">
                <Viewer @ref="View3D1" ViewerSettings="@settings" Scene=@scene Camera="@controls" />
            </div>
            <div class="w-2/5 flex flex-row justify-center">
                <div class="w-44 flex flex-col justify-center">
                    <MudTimeline SelectedIndexChanged="OnSelectYear">
                        @foreach (var year in years)
                        {
                            <MudTimelineItem Variant="Variant.Filled" Color="year == selectedYear ? Color.Primary : Color.Default">
                                <MudText>@year</MudText>
                            </MudTimelineItem>
                        }
                    </MudTimeline>
                </div>
            </div>
        </div>
    </DashboardCard>
</div>

@code {
    public List<Repository> repositories = new();
    public int[] years = Array.Empty<int>();
    private List<Week> currentContributions = new List<Week>();
    private List<Week> overallContributions = new List<Week>();
    private PerspectiveCamera controls = new PerspectiveCamera();
    private Viewer View3D1 = null!;
    List<Guid> KnownGuids = new List<Guid>();

    private ContributionDay currentDay = new ContributionDay();
    private int selectedYear = DateTime.UtcNow.Year;
    private ViewerSettings settings = new ViewerSettings()
        {
            ContainerId = "example1",
            CanSelect = true,
            CanSelectHelpers = false
        };

    private Scene scene = new Scene();

    public async Task OnSelectYear(int year)
    {
        KnownGuids = new List<Guid>();
        selectedYear = years[year];
        overallContributions = await GetContributionCallendar();
        currentContributions = overallContributions.Where(x => x.contributionDays.Select(x => x.date).Any(x => x.Year == selectedYear)).ToList();

        float weekNr = 0;
        scene = new Scene();
        controls.LookAt = new Vector3(19, 1, 3);
        controls.Position = new Vector3(19, 16, 22);
        
        scene.BackGroundColor = "#f9fafb";
        scene.Add(new AmbientLight()
            {
                Intensity = 0.8f,
            });
        try
        {

            foreach (var week in currentContributions)
            {
                float dayNr = 0;
                foreach (var day in week.contributionDays)
                {
                    var mesh = new Mesh
                        {
                            Material = new Blazor3D.Materials.MeshStandardMaterial
                            {
                                Color = GetColor(day.contributionCount),
                                Roughness = 0f,
                            },
                            Geometry = new BoxGeometry
                            {
                                Depth = 2,
                                Width = 2,
                                Height = (float)day.contributionCount,
                            },
                            Position = new Vector3
                            {
                                X = weekNr,
                                Y = (float)day.contributionCount / (float)2,
                                Z = dayNr
                            }
                        };

                    scene.Add(mesh);
                    day.Id = mesh.Uuid;
                    KnownGuids.Add(mesh.Uuid);
                    dayNr += 2.4f;
                }
                weekNr += 2.4f;
            }


            controls.LookAt = new Vector3(currentContributions.Count + 9, 0, 3);
            controls.Position = new Vector3(currentContributions.Count + 9, currentContributions.Count-17, 40);
            await View3D1.UpdateScene();
            await View3D1.UpdateCamera(controls);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw;
        }
        await View3D1.UpdateScene();
    }

    private void SelectObject(Object3DArgs e)
    {
        currentDay = currentContributions.SelectMany(x => x.contributionDays).FirstOrDefault(x => x.Id == e.UUID);
        var contains = KnownGuids.Contains(e.UUID);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        KnownGuids = new List<Guid>();
        try
        {
            scene.BackGroundColor = "#f9fafb";
            scene.Add(new AmbientLight()
                {
                    Intensity = 0.8f,
                });


            overallContributions = await GetContributionCallendar();
            currentContributions = overallContributions.Where(x => x.contributionDays.Select(x => x.date).Any(x => x.Year == selectedYear)).ToList();
            float weekNr = 0;
            foreach (var week in currentContributions)
            {
                float dayNr = 0;
                foreach (var day in week.contributionDays)
                {
                    var mesh = new Mesh
                        {
                            Material = new Blazor3D.Materials.MeshStandardMaterial
                            {
                                Color = GetColor(day.contributionCount),
                                Roughness = 0f,
                            },
                            Geometry = new BoxGeometry
                            {
                                Depth = 2,
                                Width = 2,
                                Height = (float)day.contributionCount,
                            },
                            Position = new Vector3
                            {
                                X = weekNr,
                                Y = (float)day.contributionCount / (float)2,
                                Z = dayNr
                            }
                        };
                    scene.Add(mesh);
                    day.Id = mesh.Uuid;
                    KnownGuids.Add(mesh.Uuid);
                    dayNr += 2.4f;
                }
                weekNr += 2.4f;
            }
            
            controls.LookAt = new Vector3(currentContributions.Count + 9, 0, 3);
            controls.Position = new Vector3(currentContributions.Count + 9, currentContributions.Count - 17, 40);

            await View3D1.UpdateScene();
            await View3D1.UpdateCamera(controls);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw;
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetUserRepos();

        if (firstRender)
        {
            View3D1.ObjectSelected += SelectObject;
        }

        base.OnAfterRenderAsync(firstRender);
    }

    public void StateChangeEvent(object sender, EventArgs args)
    {
        StateHasChanged();
    }

    async Task GetUserRepos()
    {
        var token = state.GetToken();

        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token); ;

            var result = await client.GetAsync(" https://api.github.com/user/repos");

            if (!result.IsSuccessStatusCode)
            {
                Snackbar.Add("Reactor meltdown is imminent", Severity.Error);
                state.Reset();
                Navigation.NavigateTo("/login");
            }

            repositories = await result.Content.ReadFromJsonAsync<List<Repository>>();
        }
    }

    async Task<List<Week>> GetContributionCallendar()
    {
        var token = state.GetToken();

        var graphQLClient = new GraphQLHttpClient("https://api.github.com/graphql", new NewtonsoftJsonSerializer());
        graphQLClient.HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var userRequest = new GraphQLRequest
            {
                Query = @"
                 query {
                 user(login: @USERNAME) {
                   contributionsCollection(from: @FROM, to: @TO) {
                contributionYears
                contributionCalendar {
                  totalContributions
                  weeks {
                    contributionDays {
                      color
                      contributionCount
                      date
                      weekday
                    }
                    firstDay
                    }
                  }
                }
                }
                }
                ".Replace("@USERNAME", $"\"{state.user.login}\"").Replace("@FROM", $"\"{new DateTime(selectedYear, 1, 1).ToString("s") + "Z"}\"").Replace("@TO", $"\"{new DateTime(selectedYear + 1, 1, 1).AddDays(-1).ToString("s") + "Z"}\"")

            };

        var result = await graphQLClient.SendQueryAsync<Data>(userRequest);
        var dt = result.Data;
        years = dt.user.ContributionsCollection.ContributionYears;
        return dt.user.ContributionsCollection.contributionCalendar.weeks;
    }

    public string GetColor(int number)
    {
        switch (number < ColorPallet.PrimaryColors.Length)
        {
            case true:
                {
                    return ColorPallet.PrimaryColors[number];
                }
            default:
                {
                    return ColorPallet.PrimaryColors[ColorPallet.PrimaryColors.Length - 1];
                }
        }
    }
}