@page "/login"
@using Blazor3D.Cameras;
@using Blazor3D.Enums;
@using Blazor3D.Geometires;
@using Blazor3D.Lights;
@using Blazor3D.Materials;
@using Blazor3D.Maths;
@using Blazor3D.Objects;
@using Blazor3D.Scenes;
@using Blazor3D.Settings;
@using Gitblazor.UI.Models.Authentication;
@inject NavigationManager Navigation;
@inject IGithubService githubService;
@inject State state;

<div class="h-screen w-screen flex justify-center">
    <div class="bg-gray-100 bg-opacity-90 w-96 h-64 p-5 flex flex-col items-center absolute top-0 right-0 bottom-0 left-0 m-auto rounded">
        <img src="Images/logo_login.svg" class="w-20 h-20" alt="My Happy SVG" />
        <EditForm class="w-full" Model="model" OnSubmit="onSubmit">
            <div class="mb-10">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="Token">Authentication Token</label>
                <InputText @bind-Value=model.Token class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" type="password" />
            </div>
            <div class="flex justify-center">
                <button class="bg-violet-600 text-white font-bold py-2 px-4 rounded" type="submit">Zatwierdz</button>
            </div>
        </EditForm>
    </div>
    <Viewer @ref="view3D1" Scene=@scene Camera="@controls" />
</div>


@code {
    private PerspectiveCamera controls;
    private ViewerSettings settings;
    private TokenDto model = new();
    private Viewer view3D1 = null!;
    private Scene scene;

    public Login()
    {
        controls = new PerspectiveCamera();
        settings = new ViewerSettings();
        scene = new Scene();
    }

    protected override async Task OnInitializedAsync()
    {
        if (state.IsLoggedIn)
            Navigation.NavigateTo(Routes.Home);

        settings.ContainerId = "loginPageBackground";
        controls.AnimateRotationSettings.AnimateRotation = true;
        controls.AnimateRotationSettings.StopAnimationOnOrbitControlMove = false;

        BuildBackgoundGeometry();

        await base.OnInitializedAsync();
    }

    private void BuildBackgoundGeometry()
    {
        scene.BackGroundColor = ColorPallet.White;
        scene.Add(new AmbientLight()
            {
                Intensity = 0.5f
            });
        scene.Add(new PointLight()
            {
                Intensity = 0.2f,
                Position = new Vector3
                {
                    X = 0,
                    Y = 0,
                    Z = 0
                },
                Color = ColorPallet.White
            });

        var randomNum = new Random();
        for (int i = 0; i < 100; i++)
        {
            scene.Add(new Mesh()
                {
                    Geometry = new BoxGeometry(),
                    Position = new Vector3
                    {
                        X = randomNum.Next(-15, 15),
                        Y = randomNum.Next(-15, 15),
                        Z = randomNum.Next(-15, 15),
                    },
                    Rotation = new Euler
                    {
                        X = randomNum.Next(-30, 30),
                        Y = randomNum.Next(-30, 30),
                        Z = randomNum.Next(-30, 30),
                    },
                    Material = new MeshStandardMaterial
                    {
                        Roughness = 0.4f,
                        Color = ColorPallet.PrimaryColors[randomNum.Next(8)]
                    }
                });
        }
    }

    public async Task onSubmit()
    {
        var result = await githubService.LoginUser(model.Token);

        if (result)
        {
            state.IsLoggedIn = true;
            state.SetToken(model.Token);
            Navigation.NavigateTo(Routes.Home);
        }
    }
}
